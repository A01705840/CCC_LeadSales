<%- include('includes/head.ejs', {username: username}) %>
<%- include('mx') %>
<div class="p-4 sm:ml-20 sm:mr-10 font-sans">
    <div class="shadow-lg flex flex-col justify-right p-4 border-2 border-gray-200 rounded-lg dark:border-gray-700 bg-slate-200">
        <div class="inline-flex justify-between items-center">
          <span style='font-size:30px;'>📊 Analíticas</span>
        </div>
    <div class="mt-2 lex flex-col justify-right p-4 border-2 border-gray-200 rounded-lg bg-b bg-white" style="height:970px; overflow-y:visible;">
        
        <div class="flex flex-col items-center h-full">
            <div class="max-w-2x1" style="width: 50%; height: 50%; background-color: #ffffff; border: 0px solid #444; box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.5); padding: 20px; border-radius: 15px;">
                <select id="dateRange" class=" bg-grey-600 rounded-md shadow-sm focus:outline-none text-ellipsis" style=" margin-bottom: 0px; position:relative; left: 656px;">
                    <option value="1">Una semana</option>
                    <option value="2">Un mes</option>
                    <option value="3">Un semestre</option>
                    <option value="4">Un año</option>
                  </select>
            <canvas id="leadsChart"></canvas> 
            <canvas id="pieChartEmbudo"></canvas>
            <canvas id="pieChartEstatus"></canvas>
            </div>
        </div>

        <div  style="width: 32%; height: 20%; background-color: #ffffff; border: 0px solid #444; box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.5); padding: 20px; border-radius: 15px;">
            <h2 class="text-4xl mb-4">Total de Leads: <span id="totalLeads" class="font-bold"><%= cantidadTotalLeads %></span></h2>
            <h2 class="text-4xl mb-4">El <span id="porcentajeLeadsOrganicos"></span> de los leads son orgánicos.</h2>
        </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

<script>

    // Obtener la cantidad total de leads y la cantidad de leads orgánicos de los elementos HTML
    const cantidadTotalLeads = Number(document.getElementById('totalLeads').textContent);
    const cantidadLeadsOrganicos = <%- JSON.stringify(cantidadLeadsOrganicos) %>;


    // Función para obtener el color en función del porcentaje
    function getColorForPercentage(porcentaje) {
        if (porcentaje >= 75) {
            return 'text-blue-700';
        } else if (porcentaje >= 50) {
            return 'text-blue-500';
        } else if (porcentaje >= 25) {
            return 'text-blue-300';
        } else {
            return 'text-blue-100';
        }
    }

    console.log(cantidadTotalLeads, cantidadLeadsOrganicos);
    // Calcular el porcentaje de leads orgánicos y actualizar el texto
    const porcentajeLeadsOrganicos = (cantidadLeadsOrganicos / cantidadTotalLeads) * 100;
    const porcentajeLeadsOrganicosElement = document.getElementById('porcentajeLeadsOrganicos');
    porcentajeLeadsOrganicosElement.textContent = porcentajeLeadsOrganicos.toFixed(2) + '%';

    // Asignar una clase de color en función del porcentaje
    porcentajeLeadsOrganicosElement.className = getColorForPercentage(porcentajeLeadsOrganicos);

    porcentajeLeadsOrganicosElement.style.fontWeight = 'bold';

    // Establecer la opción seleccionada tan pronto como se carga el script
    const selectedRange = localStorage.getItem('selectedRange') || '1'; // Obtener el rango seleccionado
    if (selectedRange) {
        document.getElementById('dateRange').value = selectedRange; // Establecer la opción seleccionada
    }

    // Datos de ejemplo para la gráfica de donut
    const datos = <%- JSON.stringify(cantidadLeadsEmbudos) %>[0];

    // Crear arrays para almacenar las etiquetas y los totales de leads
    const embudos = [];
    const totalesLeads = [];

    // Iterar sobre cada objeto en el array
    datos.forEach(embudo => {
        // Obtener el nombre del embudo y el total de leads
        const nombreEmbudo = embudo.Embudo;
        const totalLeads = parseInt(embudo.TotalLeads);
        
        // Agregar el nombre del embudo y el total de leads a los arrays correspondientes
        embudos.push(nombreEmbudo);
        totalesLeads.push(totalLeads);
    });

    // Función para generar un color aleatorio pastel
    function getRandomPastelColor() {
        let r, g, b;
        do {
            r = Math.floor(Math.random() * 128) + 128; // Valor entre 128 y 255 para tonos más claros
            g = Math.floor(Math.random() * 128) + 128; // Valor entre 128 y 255 para tonos más claros
            b = Math.floor(Math.random() * 128) + 128; // Valor entre 128 y 255 para tonos más claros
        } while (r === g && g === b); // Evitar colores grises
        return `rgb(${r}, ${g}, ${b})`;
    }

    // Crear un array para almacenar los colores
    const backgroundColors = embudos.map(() => getRandomPastelColor());

    // Definir el objeto pieData con las etiquetas y los totales de leads
    const pieData = {
        labels: embudos, // Usar los nombres de los embudos como etiquetas
        datasets: [{
            label: '1',
            data:  totalesLeads,
            backgroundColor: backgroundColors,
            hoverOffset: 4
        }]
    };

    // Obtener el contexto del canvas para la gráfica de donut
    const pieCtx = document.getElementById('pieChartEmbudo').getContext('2d');

    // Configuración de la gráfica de donut
    let pieChartEmbudo = new Chart(pieCtx, {
        type: 'doughnut',
        data: pieData,
        options: {
            responsive: true,
            plugins: {
                datalabels: {
                    formatter: (value, ctx) => {
                        const total = ctx.chart.data.datasets[0].data.reduce((acc, curr) => acc + curr, 0);
                        const percentage = ((value / total) * 100).toFixed(2) + '%';
                        return percentage;
                    },
                    color: '#fff',
                    font: {
                        weight: 'bold'
                    }
                }
            },
            legend: {
                position: 'top',
            },
            title: {
                display: true,
                text: 'Gráfica de Pay Embudo'
            }
        }
    });


    // Datos de ejemplo
    const data = <%- JSON.stringify(leadsPerDay) %>.map(item => ({
        ...item,
        Fecha: new Date(item.Fecha)
    }));
    // Obtener el contexto del canvas para después crear la gráfica
    const ctx = document.getElementById('leadsChart').getContext('2d');

    // Función para formatear la fecha
    function formatDate(date, range) {
        switch (parseInt(range)) {
            case 1: // Semana
                return moment(date).format('D'); // Solo el día del mes
            case 2: // Mes
                return moment(date).format('D'); // Solo el día del mes
            case 3: // Semestre
                return moment(date).format('MMM'); // Solo el mes
            case 4: // Año
                return moment(date).format('MMM'); // Solo el mes
            default:
                throw new Error('Invalid range');
        }
    }

    // Función para obtener el texto del label
    function getLabelText(range) {
        switch (parseInt(range)) {
            case 1: // Semana
            case 2: // Mes
                return 'Leads por día';
            case 3: // Semestre
            case 4: // Año
                return 'Leads por mes';
            default:
                throw new Error('Invalid range');
        }
    }

    let myChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: data.map(item => formatDate(item.Fecha, selectedRange)), // Usar la función formatDate
        datasets: [{
            label: getLabelText(selectedRange), // Usar la función getLabelText
            data: data.map(item => item.CantidadLeads),
                backgroundColor: 'rgba(23, 16, 198, 0.2)',
                pointStyle: 'star', // Cambiar la forma de los puntos a triángulos
                borderColor: 'rgba(23, 16, 198, 0.8)',
                borderWidth: 5,
                pointRadius: 5,
                pointBackgroundColor: 'rgba(23, 16, 198, 0.8)',
                tension: 0.3,
                fill: true,
                point: {
                    onHover: (event, point, dataset, context) => {
                        event.native.target.style.cursor = 'pointer';
                    },
                    onLeave: (event, point, dataset, context) => {
                        event.native.target.style.cursor = 'default';
                    }
                }
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        drawBorder: false,
                        drawOnChartArea: false
                    }
                },
                x: {
                    grid: {
                        drawBorder: false,
                        drawOnChartArea: false
                    }
                }
            },
            plugins: {
                tooltip: {
                    intersect: false,
                    mode: 'index',
                    displayColors: false,
                    callbacks: {
                        title: function(tooltipItem) {
                            return getLabelText(selectedRange); // Usar la función getLabelText
                        },
                        label: function(context) {
                            var label = context.dataset.label || '';
                            if (label) {
                                label += ': ';
                            }
                            if (context.parsed.y !== null) {
                                label += new Intl.NumberFormat('es-ES').format(context.parsed.y);
                            }
                            return label;
                        }
                    }
                }
            }
        },
        plugins: [{
            id: 'custom_grid_lines',
            beforeDraw: (chart, args, options) => {
                const {ctx, scales} = chart;
                const {x: xAxis} = scales;
                ctx.save();
                xAxis.ticks.forEach((value, index) => {
                    if (index === 0) return;
                    const xPos = xAxis.getPixelForTick(index);
                    ctx.setLineDash([4, 4]);
                    ctx.beginPath();
                    ctx.moveTo(xPos, scales.y.top);
                    ctx.lineTo(xPos, scales.y.bottom);
                    ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
                    ctx.stroke();
                });
                ctx.restore();
            }
        }]
    });



    document.getElementById('dateRange').addEventListener('change', function(event) {
    event.preventDefault(); // Evitar la recarga de la página
    const selectedRange = this.value;
    localStorage.setItem('selectedRange', selectedRange); // Guardar el rango seleccionado

      // Hacer una solicitud AJAX para obtener los datos
      fetch('/lead/analitics/' + selectedRange)
            .then(response => response.json())
            .then(data => {
                // Formatear las fechas y actualizar la gráfica con los nuevos datos
                myChart.data.labels = data.leadsPorDia.map(item => formatDate(item.Fecha, selectedRange));
                myChart.data.datasets[0].data = data.leadsPorDia.map(item => item.CantidadLeads);
                myChart.data.datasets[0].label = getLabelText(selectedRange); // Actualizar el label del dataset
                myChart.options.plugins.tooltip.callbacks.title = function(tooltipItem) {
                    return getLabelText(selectedRange); // Actualizar el título del tooltip
                };
                myChart.update();

                // Actualizar la cantidad total de leads
                document.getElementById('totalLeads').textContent = `${data.cantidadTotalLeads}`;

                // Calcular el porcentaje de leads orgánicos y actualizar el texto
                const porcentajeLeadsOrganicos = (data.cantidadLeadsOrganicos / data.cantidadTotalLeads) * 100;
                const porcentajeLeadsOrganicosElement = document.getElementById('porcentajeLeadsOrganicos');
                porcentajeLeadsOrganicosElement.textContent = porcentajeLeadsOrganicos.toFixed(2) + '%';

                // Asignar una clase de color en función del porcentaje
                porcentajeLeadsOrganicosElement.className = getColorForPercentage(porcentajeLeadsOrganicos);
            });
        });
</script>