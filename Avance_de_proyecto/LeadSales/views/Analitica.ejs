<%- include('includes/head.ejs', {username: username})%>
<div class="p-4 sm:ml-20 sm:mr-10 font-sans">
    <div class="shadow-lg flex flex-col justify-right p-4 border-2 border-gray-200 rounded-lg dark:border-gray-700 bg-slate-200">
        <div class="inline-flex justify-between items-center mb-4 mr-4">
            <span style='font-size:30px;'>üìä Anal√≠ticas</span>
                <div class="flex space-x-2 items-center ">
                    <p class="text-lg"><b>Visualizando datos de la version:</b></p>
                    <% %>
                    <select id="IDVersionSeleccionada" class="border text-lg border-grey-100 bg-grey-600 px-4 py-2 rounded-full shadow-sm focus:outline-none text-ellipsis">
                        <% for (let version of versiones.reverse()) { %>
                            <option value="<%= version.IDVersion %>"><%= version.NombreVersion %></option>
                        <% } %>
                    </select>
                <button id="openModalButton"  class="bg-white hover:bg-indigo-600 hover:text-white py-2 px-4 rounded-full flex items-center">
                    <svg width="14" height="18" viewBox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg" class="mr-2">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M2.83331 2.33335C2.37308 2.33335 1.99998 2.70645 1.99998 3.16669V14.8334C1.99998 15.2936 2.37308 15.6667 2.83331 15.6667H11.1666C11.6269 15.6667 12 15.2936 12 14.8334L12 6.8452L7.48814 2.33335H2.83331ZM0.333313 3.16669C0.333313 1.78598 1.4526 0.666687 2.83331 0.666687H7.48814C7.93016 0.666687 8.35409 0.842282 8.66665 1.15484L13.1785 5.66669C13.4911 5.97925 13.6666 6.40317 13.6666 6.8452V14.8334C13.6666 16.2141 12.5474 17.3334 11.1666 17.3334H2.83331C1.4526 17.3334 0.333313 16.2141 0.333313 14.8334V3.16669ZM6.99998 6.50002C7.46022 6.50002 7.83331 6.87312 7.83331 7.33335V10.3215L8.91072 9.2441C9.23616 8.91866 9.7638 8.91866 10.0892 9.2441C10.4147 9.56954 10.4147 10.0972 10.0892 10.4226L7.58923 12.9226C7.2638 13.248 6.73616 13.248 6.41072 12.9226L3.91072 10.4226C3.58529 10.0972 3.58529 9.56954 3.91072 9.2441C4.23616 8.91866 4.7638 8.91866 5.08923 9.2441L6.16665 10.3215V7.33335C6.16665 6.87312 6.53974 6.50002 6.99998 6.50002Z" fill="#4A5567"/>
                    </svg>
                    Descargar reporte
                </button>
            </div>
        </div>
            <div class="flex h-full text-center">
                <div class="w-1/2 mr-4 rounded-xl bg-white">
                    <svg class=" m-4 w-5 h-5 ms-2 text-gray-400 hover:text-gray-500" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>
                    <div data-popover id="popover-description" role="tooltip" class="absolute z-10 invisible inline-block text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 w-72 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400">
                        <div class="p-3 space-y-2">
                            <h3 class="font-semibold text-gray-900 dark:text-white">'¬øQu√© es un Lead?</h3>
                            <p>Report helps navigate cumulative growth of community activities. Ideally, the chart should have a growing trend, as stagnating chart signifies a significant decrease of community activity.</p>
                            <h3 class="font-semibold text-gray-900 dark:text-white">Calculation</h3>
                            <p>For each date bucket, the all-time volume of activities is calculated. This means that activities in period n contain all activities up to period n, plus the activities generated by your community in period.</p>
                            <a href="#" class="flex items-center font-medium text-blue-600 dark:text-blue-500 dark:hover:text-blue-600 hover:text-blue-700 hover:underline">Read more <svg class="w-2 h-2 ms-1.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                      </svg></a>
                        </div>
                        <div class="px-3 py-2">
                            <p>And here's some amazing content. It's very engaging. Right?</p>
                        </div>
                        <div data-popper-arrow></div>
                    </div>
                    <p class="text-2xl mb-2 mt-4"><b>Total de Leads</b></p>
                    <div class="flex justify-end mr-10 mb-4">
                    <p class="mr-4 text-sm">Elige el per√≠odo de an√°lisis: </p>
                    <select id="dateRange" class=" border border-grey-100 text-sm bg-grey-600 rounded-md shadow-sm focus:outline-none text-ellipsis">
                        <option value="1" selected>√öltima semana</option>
                        <option value="2">√öltimo mes</option>
                        <option value="3">√öltimos 6 meses</option>
                        <option value="4">√öltimo a√±o</option>
                    </select>
                    </div>
                    <canvas id="leadsChart" class="ml-8 mr-8 mb-4"></canvas>
                </div>
                <div class="w-1/2 rounded-xl mr-4 bg-white">
                    <p class="text-2xl mb-2 mt-4"><b>Total de Leads por Agente</b></p>
                    <div class="flex justify-end mr-10 mb-4">
                    <p class="mr-4 text-sm">Elige el per√≠odo de an√°lisis: </p>
                    <select id="dateRangeLeadsPorAgente" class="border border-grey-100 text-sm bg-grey-600 rounded-md shadow-sm focus:outline-none text-ellipsis">
                        <option value="1">√öltima semana</option>
                        <option value="2">√öltimo mes</option>
                        <option value="3">√öltimos 6 meses</option>
                        <option value="4">√öltimo a√±o</option>
                    </select>
                    </div>
                    <canvas id="leadsPorAgenteChart" class="ml-8 mr-8 mb-4"></canvas>
                    <div class="ml-8 mr-8 mb-4 text-sm">
                        <span id="totalLeadsPorAgente"></span>
                    </div>
                </div>
            </div>
            <div class="flex mt-4 text-center">
                <div class="flex flex-col w-1/4 mr-4 mb-4 bg-white rounded-xl justify-center items-center">
                    <b><p class="text-2xl mt-4">
                        Distribuci√≥n de Embudos
                    </p></b>                    
                    <div class="flex mb-4 rounded-xl h-full w-full justify-center items-center">
                        <canvas id="pieChartEmbudo"></canvas>
                    </div>
                </div>
                <div class="flex flex-col w-1/4 mr-4 mb-4 bg-white rounded-xl justify-center items-center">
                    <b><p class="text-2xl mt-4">
                        Distribuci√≥n de status
                    </p></b>
                    <div class="flex mb-4 rounded-xl h-full w-full justify-center items-center">
                        <canvas id="pieChartStatus"></canvas>
                    </div>
                </div>
                <div class="flex flex-col w-1/4 mr-4 mb-4 bg-white rounded-xl justify-center items-center">  
                    <h2 class="text-2xl mb-4 mt-4">Total de Leads: <span id="totalLeads" class="font-bold"><%= cantidadTotalLeads %></span></h2>
                    <h2 class="text-2xl mb-4">El <span id="porcentajeLeadsOrganicos"></span> de los leads son org√°nicos.</h2>
                    <div id="modalBackground" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 9999;"  class="flex items-center justify-center bg-gray-500 bg-opacity-75"></div>
                    <div id="contenedorMapa" style="cursor: pointer;">
                        <div id="mapaContenedor">
                          <div id="cerrarModal" style="position: absolute; right: 10px; top: 10px; cursor: pointer; display:none; z-index: 10000;">x</div>
                          <div id="titulo" class="text-2xl mb-2 mt-4"></div>
                          <div id="mapa" class="flex" style="height: 250px; width: 380px; pointer-events: none;">
                            <%- include('mx.ejs', {estados: estados});%>
                          </div>
                        </div>
                    </div>
                    <h2 class="text-xl mb-4"> La fecha de tu ultimo lead fue el: <span id="ultimaFechaLead"></span></h2>
                </div>
                <div class="flex flex-col w-1/4 mr-4 mb-4 bg-white rounded-xl justify-center items-center">
                    <h2 class="text-2xl mb-4 mt-4">Top Seller:</h2>
                    <h2 id="topseller" class="text-lg mb-4 mt-4"></h2>
                    <div>
                        <button id="celebration" class="flex items-center bg-white shadow-md cursor-pointer border-spacing-2.5 m-1 p-0.5 text-xl transition-transform active:scale-150 ">üéâ</button>
                    </div>
                </div>
            </div>
            </div>
        </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<!-- Agrega el script de html2canvas -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>

<!-- Agrega el script de jspdf -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>

<script>
    const celebrationButton = document.getElementById('celebration');

    function fire(ratio, opt) {
        confetti(Object.assign({}, {
            particleCount: Math.floor(200 * ratio),
            origin: { y: 1, x: Math.random() * 0.5 + 0.25}
        }), opt);
    }
    celebrationButton.addEventListener('click', () => {
        fire(0.25, { spread: 360, startVelocity: 60 });
        fire(0.2, { spread: 360 });
        fire(0.35, { spread: 360, decay: 0.9, scalar: 1});
        fire(0.1, { spread: 360, startVelocity: 30, decay: 0.92, scalar: 1.2});
        fire(0.2, { spread: 360, startVelocity: 45});
    });

    //------------MAPA DE M√âXICO-----------------//
    // Evento al hacer clic en el contenedorMapa
    document.getElementById('contenedorMapa').addEventListener('click', function() {
    var mapaContenedor = document.getElementById('mapaContenedor');
    var mapa = document.getElementById('mapa');
    var titulo = document.getElementById('titulo');
    var modalBackground = document.getElementById('modalBackground');
    var cerrarModalBoton = document.getElementById('cerrarModal');
    // Hace que el mapa sea interactivo
    mapa.style.pointerEvents = 'auto';

    // Muestra el bot√≥n de cierre
    cerrarModalBoton.style.display = 'block';  

    // Cambia el cursor a default
    contenedorMapa.style.cursor = 'default';

    // Cambia el tama√±o del contenedor y el mapa
    mapaContenedor.style.position = 'fixed';
    mapaContenedor.style.top = '15%';
    mapaContenedor.style.left = '15%';
    mapaContenedor.style.width = '65%';
    mapaContenedor.style.height = '70%';
    mapaContenedor.style.zIndex = '10000';
    mapaContenedor.style.backgroundColor = 'white';
    mapaContenedor.style.boxShadow = '0 4px 6px 0 hsla(0, 0%, 0%, 0.2)';
    mapaContenedor.style.borderRadius = '15px';

    mapa.style.width = '100%';
    mapa.style.height = 'calc(100% - 2em)'; // Resta el espacio para el t√≠tulo
    mapa.style.marginLeft = '54px';

    // Agrega un t√≠tulo al mapa
    titulo.innerHTML = '<b>Leads por Estado</b>';

    // Muestra el fondo del modal
    modalBackground.style.display = 'block';
    });

    // Funci√≥n para cerrar el modal
    function cerrarModal() {
    var mapaContenedor = document.getElementById('mapaContenedor');
    var mapa = document.getElementById('mapa');
    var titulo = document.getElementById('titulo');
    var modalBackground = document.getElementById('modalBackground');
    var cerrarModalBoton = document.getElementById('cerrarModal');
    // Hace que el mapa no sea interactivo
    mapa.style.pointerEvents = 'none';

        // Muestra el bot√≥n de cierre
    cerrarModalBoton.style.display = 'none'; 

    // Cambia el cursor a pointer
    contenedorMapa.style.cursor = 'pointer';

    // Restaura el tama√±o y la posici√≥n del contenedor
    mapaContenedor.style.position = 'static';
    mapaContenedor.style.width = 'auto';
    mapaContenedor.style.height = 'auto';
    mapaContenedor.style.backgroundColor = 'transparent';
    mapaContenedor.style.boxShadow = 'none';
    mapaContenedor.style.borderRadius = '0';

    // Restaura el tama√±o y la posici√≥n del mapa
    mapa.style.width = '380px';
    mapa.style.height = '250px';
    mapa.style.marginLeft = '0px'; 

    // Quita el t√≠tulo
    titulo.innerHTML = '';

    // Oculta el fondo del modal
    modalBackground.style.display = 'none';
    }
    document.getElementById('cerrarModal').addEventListener('click', cerrarModal);
    // Evento al hacer clic en el fondo del modal
    document.getElementById('modalBackground').addEventListener('click', cerrarModal);


    const cantidadLeadsAgente = <%- JSON.stringify(cantidadLeadsAgente) %>;
    // Obtener la cantidad total de leads y la cantidad de leads org√°nicos de los elementos HTML
    const cantidadTotalLeads = Number(document.getElementById('totalLeads').textContent);
    const cantidadLeadsOrganicos = <%- JSON.stringify(cantidadLeadsOrganicos) %>;

    // Funci√≥n para obtener el color en funci√≥n del porcentaje
    function getColorForPercentage(porcentaje) {
        if (porcentaje >= 75) {
            return 'text-blue-700';
        } else if (porcentaje >= 50) {
            return 'text-blue-500';
        } else if (porcentaje >= 25) {
            return 'text-blue-300';
        } else {
            return 'text-blue-100';
        }
    }

    // Calcular el porcentaje de leads org√°nicos y actualizar el texto
    const porcentajeLeadsOrganicos = (cantidadLeadsOrganicos / cantidadTotalLeads) * 100;
    const porcentajeLeadsOrganicosElement = document.getElementById('porcentajeLeadsOrganicos');
    porcentajeLeadsOrganicosElement.textContent = porcentajeLeadsOrganicos.toFixed(2) + '%';

    // Asignar una clase de color en funci√≥n del porcentaje
    porcentajeLeadsOrganicosElement.className = getColorForPercentage(porcentajeLeadsOrganicos);
    porcentajeLeadsOrganicosElement.style.fontWeight = 'bold';

    // Obtener el top seller y actualizar el texto
    const topSeller = document.getElementById('topseller');
    // Parse the JSON string back to an object
    const topSellerData = JSON.parse('<%- JSON.stringify(cantidadLeadsAgente[0]) %>');
    // Create a string that contains all the data
    let topSellerText = '';
    for (let i = 0; i < topSellerData.length; i++) {
        // Create a new span element
        const span = document.createElement('span');
        const br = document.createElement('br');

        if (i == 0){
            span.textContent = '1er Lugar ü•á: ' + topSellerData[i].Seller + ', con ' + topSellerData[i].TotalLeads + ' leads' + '\n';
        }
        if (i == 1){
            span.textContent = '2do Lugar ü•à: ' + topSellerData[i].Seller + ', con ' + topSellerData[i].TotalLeads + ' leads' + '\n';
        }
        if (i == 2){
            span.textContent = '3er Lugar ü•â: ' + topSellerData[i].Seller + ', con ' + topSellerData[i].TotalLeads + ' leads' + '\n';
        }

        // Append the span element to the 'topseller' element
        topSeller.appendChild(span);
        topSeller.appendChild(br);
    }
    // Establecer la opci√≥n selecscionada tan pronto como se carga el script
    const selectedRange = localStorage.getItem('selectedRange') || '1'; // Obtener el rango seleccionado
    if (selectedRange) {
        document.getElementById('dateRange').value = selectedRange; // Establecer la opci√≥n seleccionada
    }

    // Establecer la opci√≥n seleccionada de Agente
    const selectedRangeAgente = localStorage.getItem('selectedRangeAgente') || '1'; // Obtener el rango seleccionado
    if (selectedRangeAgente) {
        document.getElementById('dateRangeLeadsPorAgente').value = selectedRangeAgente; // Establecer la opci√≥n seleccionada
    }

    var ultimaFechaLead = <%- JSON.stringify(ultimaFechaLead) %> [0];


    //Esto convierte las fechas en objetos Date
    // fechas = ultimaFechaLead.map(fecha => new Date(fecha));
    // console.log("FECHAS",fechas);
    // Obtener el primer elemento en fechas
    const firstDate = ultimaFechaLead[0];
    //Formateamos firstDate
    const firstDateFormateada = moment(firstDate.UltimaFecha).format('D [de] MMMM [de] YYYY');
    const ultimaFechaLeadElement = document.getElementById('ultimaFechaLead');
    ultimaFechaLeadElement.textContent = firstDateFormateada;


    //------------------------C√≥digo gr√°fica Status------------------------------------------//
    const datosStatus= <%- JSON.stringify(cantidadLeadsStatus) %>[0];

    const status=[];
    const totalesLeadsStatus=[];

     // Iterar sobre cada objeto en el array
    datosStatus.forEach(statu => {
        // Obtener el nombre del embudo y el total de leads
        const nombreStatus = statu.Status;
        const totalLeadsStatus = parseInt(statu.TotalLeads);
        
        // Agregar el nombre del embudo y el total de leads a los arrays correspondientes
        status.push(nombreStatus);
        totalesLeadsStatus.push(totalLeadsStatus);
    });

    const backgroundColorsStatus = status.map(() => getRandomPastelColor());

    const pieDataStatus = {
        labels: status, // Usar los nombres de los embudos como etiquetas
        datasets: [{
            label: '1',
            data:  totalesLeadsStatus,
            backgroundColor: backgroundColorsStatus,
            hoverOffset: 4
        }]
    };

    // Obtener el contexto del canvas para la gr√°fica de donut
    const pieCt = document.getElementById('pieChartStatus').getContext('2d');

    // Configuraci√≥n de la gr√°fica de donut
    let pieChartStatus = new Chart(pieCt, {
        type: 'doughnut',
        data: pieDataStatus,
        options: {
            responsive: false,
            plugins: {
                datalabels: {
                    formatter: (value, ctx) => {
                        const total = ctx.chart.data.datasets[0].data.reduce((acc, curr) => acc + curr, 0);
                        const percentage = ((value / total) * 100).toFixed(2) + '%';
                        return percentage;
                    },
                    color: '#fff',
                    font: {
                        weight: 'bold'
                    }
                }
            },
            legend: {
                position: 'top',
            },
            title: {
                display: true,
                text: 'Gr√°fica de Pay Status'
            }
        }
    });


    //------------------------C√≥digo gr√°fica Embdos------------------------------------------//
    // Datos de ejemplo para la gr√°fica de donut
    const datos = <%- JSON.stringify(cantidadLeadsEmbudos) %>[0];

    // Crear arrays para almacenar las etiquetas y los totales de leads
    const embudos = [];
    const totalesLeads = [];

    // Iterar sobre cada objeto en el array
    datos.forEach(embudo => {
        // Obtener el nombre del embudo y el total de leads
        const nombreEmbudo = embudo.Embudo;
        const totalLeads = parseInt(embudo.TotalLeads);
        
        // Agregar el nombre del embudo y el total de leads a los arrays correspondientes
        embudos.push(nombreEmbudo);
        totalesLeads.push(totalLeads);
    });

    // Funci√≥n para generar un color aleatorio pastel
    function getRandomPastelColor() {
        let r, g, b;
        do {
            r = Math.floor(Math.random() * 128) + 128; // Valor entre 128 y 255 para tonos m√°s claros
            g = Math.floor(Math.random() * 128) + 128; // Valor entre 128 y 255 para tonos m√°s claros
            b = Math.floor(Math.random() * 128) + 128; // Valor entre 128 y 255 para tonos m√°s claros
        } while (r === g && g === b); // Evitar colores grises
        return `rgb(${r}, ${g}, ${b})`;
    }

    // Crear un array para almacenar los colores
    const backgroundColors = embudos.map(() => getRandomPastelColor());

    // Definir el objeto pieData con las etiquetas y los totales de leads
    const pieData = {
        labels: embudos, // Usar los nombres de los embudos como etiquetas
        datasets: [{
            label: '1',
            data:  totalesLeads,
            backgroundColor: backgroundColors,
            hoverOffset: 4
        }]
    };
    // Obtener el contexto del canvas para la gr√°fica de donut
    const pieCtx = document.getElementById('pieChartEmbudo').getContext('2d');

    // Configuraci√≥n de la gr√°fica de donut
    let pieChartEmbudo = new Chart(pieCtx, {
        type: 'doughnut',
        data: pieData,
        options: {
            responsive: false,
            plugins: {
                datalabels: {
                    formatter: (value, ctx) => {
                        const total = ctx.chart.data.datasets[0].data.reduce((acc, curr) => acc + curr, 0);
                        const percentage = ((value / total) * 100).toFixed(2) + '%';
                        return percentage;
                    },
                    color: '#fff',
                    font: {
                        weight: 'bold'
                    }
                }
            },
            legend: {
                position: 'top',
            },
            title: {
                display: true,
                text: 'Gr√°fica de Pay Embudo'
            }
        }
    }); 
    
    
    // Obtener el contexto del canvas para despu√©s crear la gr√°fica
    const ctx = document.getElementById('leadsChart').getContext('2d');

    // Funci√≥n para formatear la fecha
    function formatDate(date, range) {
        switch (parseInt(range)) {
            case 1: // Semana
                return moment(date).format('D'); // Solo el d√≠a del mes
            case 2: // Mes
                return moment(date).format('D'); // Solo el d√≠a del mes
            case 3: // Semestre
                return moment(date).format('MMM'); // Solo el mes
            case 4: // A√±o
                return moment(date).format('MMM'); // Solo el mes
            default:
                throw new Error('Invalid range');
        }
    }

    // Funci√≥n para obtener el texto del label
    function getLabelText(range) {
        switch (parseInt(range)) {
            case 1: // Semana
            case 2: // Mes
                return 'Leads por d√≠a';
            case 3: // Semestre
            case 4: // A√±o
                return 'Leads por mes';
            default:
                throw new Error('Invalid range');
        }
    }

    // Datos de ejemplo
    const leadsPerDay = <%- JSON.stringify(leadsPerDay) %>.map(item => ({
        ...item,
        Fecha: new Date(item.Fecha)
    }));
    
    let myChart = new Chart(ctx, {
    type: 'line',
    data: {
            labels: leadsPerDay.map(lead => formatDate(lead.Fecha, selectedRange)), // Usar leadsPerDay para las etiquetas
            datasets: [{
                label: getLabelText(selectedRange), // Usar la funci√≥n getLabelText
                data: leadsPerDay.map(lead => lead.CantidadLeads), // Mapear leadsPerDay a un array de cantidades de leads
                backgroundColor: 'rgba(23, 16, 198, 0.2)',
                pointStyle: 'circle', // Cambiar la forma de los puntos a tri√°ngulos
                borderColor: 'rgba(23, 16, 198, 0.8)',
                borderWidth: 5,
                pointRadius: 5,
                pointBackgroundColor: 'rgba(23, 16, 198, 0.8)',
                tension: 0.5,
                fill: true,
                point: {
                    onHover: (event, point, dataset, context) => {
                        event.native.target.style.cursor = 'pointer';
                    },
                    onLeave: (event, point, dataset, context) => {
                        event.native.target.style.cursor = 'default';
                    }
                }   
            }]
        },

        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        drawBorder: false,
                        drawOnChartArea: false
                    },
                    title:  {
                        display: true,
                        text: 'Leads'
                    }
                },
                x: {
                    grid: {
                        drawBorder: false,
                        drawOnChartArea: false
                    },
                    title: {
                        display: true,
                        text: 'Periodo de tiempo'
                    }
                }
            },
            plugins: {
                tooltip: {
                    intersect: false,
                    mode: 'index',
                    displayColors: false,
                    callbacks: {
                        title: function(tooltipItem) {
                            return getLabelText(selectedRange); // Usar la funci√≥n getLabelText
                        },
                        label: function(context) {
                            var label = context.dataset.label || '';
                            if (label) {
                                label += ': ';
                            }
                            if (context.parsed.y !== null) {
                                label += new Intl.NumberFormat('es-ES').format(context.parsed.y);
                            }
                            return label;
                        }
                    }
                }
            }
        },
        plugins: [{
            id: 'custom_grid_lines',
            beforeDraw: (chart, args, options) => {
                const {ctx, scales} = chart;
                const {x: xAxis} = scales;
                ctx.save();
                xAxis.ticks.forEach((value, index) => {
                    if (index === 0) return;
                    const xPos = xAxis.getPixelForTick(index);
                    ctx.setLineDash([4, 4]);
                    ctx.beginPath();    
                    ctx.moveTo(xPos, scales.y.top);
                    ctx.lineTo(xPos, scales.y.bottom);
                    ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
                    ctx.stroke();
                });
                ctx.restore();
            }
        }]
    });
 
    var fechas = <%- JSON.stringify(fechas) %>;
    var datasets = <%- JSON.stringify(datasets) %>;

    // Calcular el total de Leads por Agente
    const totalLeadsPorAgente = datasets.map(dataset => {
        const totalLeads = dataset.datos.reduce((a, b) => a + b, 0);
        return `${dataset.agente}: ${totalLeads}`;
    });

    // Actualizar el contenido del elemento HTML con el total de Leads por Agente
    document.getElementById('totalLeadsPorAgente').textContent = totalLeadsPorAgente.join(', ');
   
    // Obtener el contexto del segundo canvas
    const ctxAgent = document.getElementById('leadsPorAgenteChart').getContext('2d');

     // Crear la gr√°fica de Leads por Agente
     const leadsPorAgenteChart = new Chart(ctxAgent, {
        type: 'line',
        data: {
        labels: fechas.map(fecha => formatDate(fecha, selectedRangeAgente)), // Usar la funci√≥n formatDate
        datasets: datasets.map(dataset => ({
            label: dataset.agente, // Asegurarse de incluir la propiedad label
            data: dataset.datos, // Asegurarse de incluir la propiedad data
            tension: 0.4 // A√±adir curvas a las l√≠neas
        }))
    },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        drawBorder: false,
                        drawOnChartArea: false
                    },
                    title: {
                        display: true,
                        text: 'Leads'
                    }
                },
                x: {
                    grid: {
                        drawBorder: false,
                        drawOnChartArea: false
                    },
                    title: {
                        display: true,
                        text: 'Periodo de tiempo'
                    }
                }
            },
            plugins: {
                tooltip: {
                    intersect: false,
                    mode: 'index',
                    displayColors: false,
                    callbacks: {
                        title: function(tooltipItem) {
                            return getLabelText(selectedRange); // Actualizar el t√≠tulo del tooltip
                        }
                    }
                }
            }
        }
    });

    //Ajax para la parte de agente
    document.getElementById('dateRangeLeadsPorAgente').addEventListener('change', function(event) {
    event.preventDefault(); // Evitar la recarga de la p√°gina
    const selectedRangeAgent = this.value;
    localStorage.setItem('selectedRangeAgent', selectedRangeAgent); // Guardar el rango seleccionado

    let version= document.getElementById('IDVersionSeleccionada').value;

    fetch('/lead/analitics/agent/' + selectedRangeAgent+'/'+version)
    .then(response => response.json())
    .then(data => {

        // Utilizar los datos ya procesados que recibes del servidor
        const fechas = data.fechas;
        const datasets = data.datasets.map(dataset=> {
            return {
                label: dataset.agente, // Usar el nombre del agente
                data: dataset.datos, // Usar los datos del agente
                tension: 0.4 // A√±adir curvas a las l√≠neas
            };
        });
            // Calcular el total de Leads por Agente
            const totalLeadsPorAgente = datasets.map(dataset => {
            const totalLeads = dataset.data.reduce((a, b) => a + b, 0);
            return `${dataset.label}: ${totalLeads}`;
        });

        // Actualizar el contenido del elemento HTML con el total de Leads por Agente
        document.getElementById('totalLeadsPorAgente').textContent = totalLeadsPorAgente.join(', ');

        // Actualizar la gr√°fica con los nuevos datos
        leadsPorAgenteChart.data.labels = fechas.map(fecha => formatDate(fecha, selectedRangeAgent));
        leadsPorAgenteChart.data.datasets = datasets;
        leadsPorAgenteChart.update();
    })
    .catch(error => console.error('Error en la solicitud fetch: ', error));
});

// -----------  CAMBIO DE RANGO DE LEADS POR D√çA  ------------------ 

    document.getElementById('dateRange').addEventListener('change', function(event) {
    event.preventDefault(); // Evitar la recarga de la p√°gina
    const selectedRange = this.value;
    localStorage.setItem('selectedRange', selectedRange); // Guardar el rango seleccionado
    let version= document.getElementById('IDVersionSeleccionada').value;
    // Hacer una solicitud AJAX para obtener los datos
    fetch('/lead/analitics/' + selectedRange+'/'+version)
    .then(response => response.json())
    .then(data => {
        // Formatear las fechas y actualizar la gr√°fica con los nuevos datos
        myChart.data.labels = data.leadsPerDay.map(lead => formatDate(lead.Fecha, selectedRange));
        myChart.data.datasets[0].data = data.leadsPerDay.map(lead => lead.CantidadLeads);
        myChart.data.datasets[0].label = getLabelText(selectedRange); // Actualizar el label del dataset
        myChart.options.plugins.tooltip.callbacks.title = function(tooltipItem) {
            return getLabelText(selectedRange); // Actualizar el t√≠tulo del tooltip 
        };
        myChart.update();
    })
    .catch(error => console.error('Error en la solicitud fetch: ', error));
});

    document.getElementById('IDVersionSeleccionada').addEventListener('change', function(event) {
        event.preventDefault(); // Evitar la recarga de la p√°gina
        console.log("Cambio de version");
        let version = document.getElementById('IDVersionSeleccionada').value;
        fetch('/lead/analitics/' + version)
            .then(response => response.json())
            .then(data => {
                console.log(data);

                //Asignaci√≤n de porcentaje de leads inorganicos
                const cantidadTotalLeads = data['cantidadTotalLeads'];
                const cantidadLeadsOrganicos =  data['cantidadLeadsOrganicos'];

                //Asignaci√≤n total de leads
                document.getElementById('totalLeads').textContent = cantidadTotalLeads;

                // Calcular el porcentaje de leads org√°nicos y actualizar el texto
                const porcentajeLeadsOrganicos = (cantidadLeadsOrganicos / cantidadTotalLeads) * 100;
                const porcentajeLeadsOrganicosElement = document.getElementById('porcentajeLeadsOrganicos');
                porcentajeLeadsOrganicosElement.textContent = porcentajeLeadsOrganicos.toFixed(2) + '%';
            
                // Asignar una clase de color en funci√≥n del porcentaje
                porcentajeLeadsOrganicosElement.className = getColorForPercentage(porcentajeLeadsOrganicos);
                porcentajeLeadsOrganicosElement.style.fontWeight = 'bold';

                //Asignaci√≤n ultima fecha
                const firstDate = data['ultimaFechaLead'][0][0]['UltimaFecha'];
                const firstDateFormateada = moment(firstDate).format('D [de] MMMM [de] YYYY');
                const ultimaFechaLeadElement = document.getElementById('ultimaFechaLead');
                ultimaFechaLeadElement.textContent = firstDateFormateada;

                //Asignaci√≤n nuevos datos para el top seller
                const topSeller = document.getElementById('topseller');
                topSeller.innerHTML = "";
                const topSellerData = data['cantidadLeadsAgente'][0];
                let topSellerText = '';
                for (let i = 0; i < topSellerData.length; i++) {
                    const span = document.createElement('span');
                    const br = document.createElement('br');
                    if (i == 0){
                        span.textContent = '1er Lugar ü•á: ' + topSellerData[i].Seller + ', con ' + topSellerData[i].TotalLeads + ' leads' + '\n';
                    }
                    if (i == 1){
                        span.textContent = '2do Lugar ü•à: ' + topSellerData[i].Seller + ', con ' + topSellerData[i].TotalLeads + ' leads' + '\n';
                    }
                    if (i == 2){
                        span.textContent = '3er Lugar ü•â: ' + topSellerData[i].Seller + ', con ' + topSellerData[i].TotalLeads + ' leads' + '\n';
                    }
                    topSeller.appendChild(span);
                    topSeller.appendChild(br);
                }               


                const datos = data['cantidadLeadsEmbudos'][0];
                // Crear arrays para almacenar las etiquetas y los totales de leads
                const embudo = [];
                const totalesLead = [];
                                
                // Iterar sobre cada objeto en el array
                datos.forEach(embudoItem => {
                    // Obtener el nombre del embudo y el total de leads
                    const nombreEmbudo = embudoItem.Embudo;
                    const totalLeads = parseInt(embudoItem.TotalLeads);
                    
                    // Agregar el nombre del embudo y el total de leads a los arrays correspondientes
                    embudo.push(nombreEmbudo);
                    totalesLead.push(totalLeads);
                });
                
                // Crear un array para almacenar los colores
                const backgroundColor2 = embudo.map(() => getRandomPastelColor());
                pieData.labels = embudo;
                pieData.datasets[0].data = totalesLead;
                pieData.datasets[0].backgroundColor = backgroundColor2;
                pieChartEmbudo.update();
                

                //Crear nueva grafica de status
                const datosStatus= data['cantidadLeadsStatus'][0];
                const status=[];
                const totalesLeadsStatus=[];
            
                 // Iterar sobre cada objeto en el array
                datosStatus.forEach(statu => {
                    // Obtener el nombre del embudo y el total de leads
                    const nombreStatus = statu.Status;
                    const totalLeadsStatus = parseInt(statu.TotalLeads);
                    
                    // Agregar el nombre del embudo y el total de leads a los arrays correspondientes
                    status.push(nombreStatus);
                    totalesLeadsStatus.push(totalLeadsStatus);
                });
            
                const backgroundColorsStatus = status.map(() => getRandomPastelColor());
                pieDataStatus.labels = status;
                pieDataStatus.datasets[0].data = totalesLeadsStatus;
                pieDataStatus.datasets[0].backgroundColor = backgroundColorsStatus;
                pieChartStatus.update();

            }).catch(error => console.error('Error en la solicitud fetch: ', error));
    });


    // Event listener para el bot√≥n de descargar PDF
    document.getElementById('openModalButton').addEventListener('click', () => {
        // Capturar la imagen de las gr√°ficas utilizando html2canvas
        html2canvas(document.querySelector('.shadow-lg')).then(canvas => {
            const imgData = canvas.toDataURL('image/png');

            // Crear un objeto PDF
            const pdf = new jsPDF('p', 'mm', 'a4');

            // Agregar la imagen de las gr√°ficas al PDF
            pdf.addImage(imgData, 'PNG', 10, 10, 180, 160);

            // Descargar el PDF
            pdf.save('reporte.pdf');
        });
    });


</script>